name: Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop]

jobs:
  lint-backend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install linting tools
        working-directory: ./kronos-eam-backend
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          
      - name: Run Black
        working-directory: ./kronos-eam-backend
        run: black --check app/
        
      - name: Run isort
        working-directory: ./kronos-eam-backend
        run: isort --check-only app/
        
      - name: Run Flake8
        working-directory: ./kronos-eam-backend
        run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        
      - name: Run MyPy
        working-directory: ./kronos-eam-backend
        run: mypy app/ --ignore-missing-imports || true

  lint-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./kronos-eam-react/package-lock.json
          
      - name: Install dependencies
        working-directory: ./kronos-eam-react
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./kronos-eam-react
        run: npm run lint || true
        
      - name: Run TypeScript check
        working-directory: ./kronos-eam-react
        run: npm run type-check || npx tsc --noEmit

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-images:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./kronos-eam-backend
          push: false
          tags: kronos-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./kronos-eam-react
          push: false
          tags: kronos-frontend:test
          build-args: |
            REACT_APP_API_URL=http://localhost:8000/api/v1
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-backend, lint-frontend, build-images]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: kronos
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: kronos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install backend dependencies
        working-directory: ./kronos-eam-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
          
      - name: Run integration tests
        working-directory: ./kronos-eam-backend
        env:
          DATABASE_URL: postgresql://kronos:test_password@localhost:5432/kronos_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          # Initialize test database
          python scripts/init_database.py || true
          # Run tests
          pytest tests/integration/ -v || echo "No integration tests found"