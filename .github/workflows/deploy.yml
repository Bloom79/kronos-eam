name: Deploy to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west1
  BACKEND_SERVICE: kronos-backend
  FRONTEND_SERVICE: kronos-frontend
  SQL_INSTANCE: kronos-db

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: kronos
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: kronos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: ./kronos-eam-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests
        working-directory: ./kronos-eam-backend
        env:
          DATABASE_URL: postgresql://kronos:test_password@localhost:5432/kronos_test
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest --cov=app tests/ || echo "No tests found, skipping"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./kronos-eam-react/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./kronos-eam-react
        run: npm ci

      - name: Run frontend tests
        working-directory: ./kronos-eam-react
        run: npm test -- --watchAll=false --passWithNoTests

      - name: Build frontend
        working-directory: ./kronos-eam-react
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # Deploy Backend
      - name: Build and Push Backend
        working-directory: ./kronos-eam-backend
        run: |
          docker build -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/kronos-docker/backend:latest .
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/kronos-docker/backend:latest

      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${BACKEND_SERVICE} \
            --image ${REGION}-docker.pkg.dev/${PROJECT_ID}/kronos-docker/backend:latest \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@/kronos_eam?host=/cloudsql/${PROJECT_ID}:${REGION}:${SQL_INSTANCE}" \
            --set-secrets "SECRET_KEY=jwt-secret:latest,REDIS_PASSWORD=redis-password:latest" \
            --add-cloudsql-instances ${PROJECT_ID}:${REGION}:${SQL_INSTANCE} \
            --service-account kronos-backend@${PROJECT_ID}.iam.gserviceaccount.com \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --port 8000

      # Get Backend URL for Frontend
      - name: Get Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${BACKEND_SERVICE} --region=${REGION} --format='value(status.url)')
          echo "BACKEND_URL=${BACKEND_URL}" >> $GITHUB_OUTPUT

      # Deploy Frontend
      - name: Build and Push Frontend
        working-directory: ./kronos-eam-react
        run: |
          docker build \
            --build-arg REACT_APP_API_URL=${{ steps.backend-url.outputs.BACKEND_URL }}/api/v1 \
            -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/kronos-docker/frontend:latest .
          docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/kronos-docker/frontend:latest

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${FRONTEND_SERVICE} \
            --image ${REGION}-docker.pkg.dev/${PROJECT_ID}/kronos-docker/frontend:latest \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --service-account kronos-frontend@${PROJECT_ID}.iam.gserviceaccount.com \
            --memory 256Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --port 80

      - name: Get Service URLs
        id: urls
        run: |
          FRONTEND_URL=$(gcloud run services describe ${FRONTEND_SERVICE} --region=${REGION} --format='value(status.url)')
          echo "FRONTEND_URL=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "BACKEND_URL=${{ steps.backend-url.outputs.BACKEND_URL }}" >> $GITHUB_OUTPUT

      # Database migrations are handled automatically by the backend entrypoint script

      - name: Comment PR with URLs
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš€ Deployment Successful!\n\n**Frontend URL:** ${{ steps.urls.outputs.FRONTEND_URL }}\n**Backend API:** ${{ steps.urls.outputs.BACKEND_URL }}\n\n**Demo Credentials:**\n- Email: \`demo@kronos-eam.local\`\n- Password: \`demo123\``
            })

      - name: Deployment Summary
        run: |
          echo "ðŸŽ‰ Deployment Complete!"
          echo "Frontend URL: ${{ steps.urls.outputs.FRONTEND_URL }}"
          echo "Backend API: ${{ steps.urls.outputs.BACKEND_URL }}"
          echo "Demo Login: demo@kronos-eam.local / demo123"